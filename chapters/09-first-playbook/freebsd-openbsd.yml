---
- name: Beispiel: Variablen für FreeBSD und OpenBSD nutzen
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # OS-spezifische Variablen zentral ablegen
    os_map:
      FreeBSD:
        nginx_pkg: nginx
        service: nginx
        config_path: /usr/local/etc/nginx/nginx.conf
        template: nginx-freebsd.conf.j2
      OpenBSD:
        nginx_pkg: nginx
        service: nginx
        config_path: /etc/nginx/nginx.conf
        template: nginx-openbsd.conf.j2

    # Hole die passende OS-Var-Menge über die erkannten Facts
    os_vars: "{{ os_map[ansible_distribution] | default({}) }}"

  tasks:
    - name: Abbrechen, wenn OS nicht unterstützt wird
      ansible.builtin.fail:
        msg: "Unsupported OS {{ ansible_distribution }}. Unterstützt: FreeBSD, OpenBSD"
      when: os_vars == {}

    - name: Nginx installieren
      ansible.builtin.package:
        name: "{{ os_vars.nginx_pkg }}"
        state: present

    - name: Nginx-Konfiguration aus Template bereitstellen
      ansible.builtin.template:
        # nutzt die vorhandenen Templates aus Kapitel 10
        src: "../10-handlers/templates/{{ os_vars.template }}"
        dest: "{{ os_vars.config_path }}"
        mode: "0644"
      notify: restart nginx

    - name: Nginx beim Booten aktivieren (FreeBSD)
      community.general.sysrc:
        name: nginx_enable
        value: "YES"
      when: ansible_os_family == "FreeBSD"

    - name: OpenBSD rcctl-Status für nginx abfragen
      ansible.builtin.command: rcctl get nginx status
      register: rcctl_status
      changed_when: false
      failed_when: false
      when: ansible_distribution == "OpenBSD"

    - name: Nginx beim Booten aktivieren (OpenBSD)
      ansible.builtin.command: rcctl enable nginx
      when: ansible_distribution == "OpenBSD" and rcctl_status.stdout != "on"

    - name: Nginx-Service starten und aktivieren
      ansible.builtin.service:
        name: "{{ os_vars.service }}"
        state: started
        enabled: yes

  handlers:
    - name: restart nginx
      ansible.builtin.service:
        name: "{{ os_vars.service }}"
        state: restarted


